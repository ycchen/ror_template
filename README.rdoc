==Welcome to ror_template

Here are the steps to get this application up and running
$ bundel install

$ rake db:migrate

$ rake db:seed


Here are the steps and notes of how I create this applications

# generate layout file

$ rails g nifty:layout

# generate landing page and controller

$ rails g controller home index

# configure route for root config/routes.rb

root :to => 'home#index'

setup layout file with navigation, and correspondence files such as js, css, and shared partial file

1. include bootstrap library

2. add gem 'bootstrap-sass-rails' into Gem file

3. Usage - Stylesheets : add following code to application.css

/*
 *= require twitter/bootstrap
 */
or

@import "twitter/bootstrap"

In order to access to the vraibles within the Twitter Bootstrape framework

# Usage - Javascript

# add following code to application.js

//= require twitter/bootstrap


# add shared/navigation as partial file

$ touch shared/navigation.html.erb


# add/modified application.html.erb with bootstrap layout

# Generate devise gem

$ rails g devise:install

# *** Generate User model using devise

$ rails g devise User

# modified migration file for User model @ db/migrate/date_devise_create_users.rb

# uncomment all of comment fields

$ rake db:migrate

# generate User view template

$ rails g devise:views Users

# check current routes

$ rake routes

# check rake command

$ rake -T

# added display_name and background into models/User.rb as part of attr_accessible

modified views\devise\registrations\new.html.erb for Sign up route

modified views\devise\sessions\new.html.erb for Sign in route

added bootstrap layout for both files

added Sign in, Sign up, and Sign out link on navigation bar

# *** Create posts Model

$ rails g scaffold post title:string user_id:integer comment:text type:string content:text

$ rake db:migrate

# Editing post migration script

Added relationship on the Model Post and User

# Adding API 

1. create app\controllers\api folder

2. create app\controllers\api\feeds_controller.rb file

module Api
	class FeedsController < ApplicationController
		respond_to :json
		
		def index
			posts = Post.all
			# respond_with Post.all
			respond_with posts
		end
	end
end

3. modified routes.rb to add api routes

  namespace :api, defaults: {format: 'json'} do
  	resources :feeds		
  end

4. testing by calling URL as below

http://localhost:3000/api/feeds

# adding gravatar-ultimate gem to Gemfile

1. updated user model to handle generate Avatar using gravatar-ultimate

# added js to handle slide up the alert message

$('.alert').delay(5000).slideUp('show')

# added dashboard controller/view

$ rails g controller dashboards show

1. added resource :dashboard in config/routes.rb

2. rake routes to check the routes are correct

reference website http://guides.rubyonrails.org/routing.html

# setup test db

$ rake db:test:prepare
$ rake db:test:load
$ rake db:test:purge
$ rake db:test:clone
$ rake db:test:clone_structure



$ rake test:units
$ rake test:functionals
$ rake test:integration
$ rake test:plugins


# To run performance tests


$ rake test:benchmark
$ rake test:profile


# User model unit testing 


$ ruby -Itest test/unit/user_test.rb
$ ruby -Itest test/unit/user_test.rb -n test_the_truth


# by adding validation to fix this failure test

# Test rake command

$ rake test:units

# Creating and saving records examples

method 1:

my_record = MyClass.new
my_record.col_1 = value_1
my_record_col_2 = value_2

method 2:

my_record = MyClass.new(:col_1 => value_1, :col_2 => value_2)

my_record = MyClass.new(clo_1: value_1, col_2: value_2)
my_record.save
my_record.destroy


method 3:

my_record = MyClass.create(:col_1 => value_1, :col_2 => value_2)

# Get record from the db

	my_record = MyClass.find(:first)
	my_records = MyClass.find(:all)
	my_record = MyClass.find(id)
	my_records = MyClass.find(id_1, id_2, ...)

	record = MyClass.find_by_col_1(value_1)
	record = MyClass.find_all_by_col_1(value_1)
	record = MyClass.find_by_col_1_and_col_2(value_1, value_2)
	record = MyClass.find_all_by_col_1_and_col_2(value_1, value_2)

# update rails command

update Gemfile to gem 'rails', '3.2.12'

$ bundle update rails
$ gem update rails

== Adding cookies.js for Dashboard navigation purpose

# Add /app/vendor/assets/javascripts/cookies.js plugin

== Added api/api_controller.rb

== Added api/posts_controller.rb

== Modified api/feeds_controller.rb

== Added relation_for() in /models/user.rb

== Added text_posts model, link_post model, and image_post model

class TextPost < Post
  # attr_accessible :title, :body
end

== Added relationship between User model and text_posts model